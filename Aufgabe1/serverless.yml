service: dsg-project-1

frameworkVersion: '2'


provider:
  name: aws
  runtime: python3.9
  lambdaHashingVersion: 20201221
  region: eu-central-1

plugins:
  - serverless-iam-roles-per-function


functions:
  mainTest:
    handler: mainTest.mainTest
    iamRoleStatementsName: InvokeOtherLambdaRoleTest
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
          - lambda:InvokeAsync
        Resource: "arn:aws:lambda:${self:provider.region}:524748656081:function:*"
      - Effect: "Allow"
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource: "*"

  writeItem:
    handler: writeItem.writeItem
    iamRoleStatementsName: writeItem
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem 
        Resource: "arn:aws:dynamodb:${self:provider.region}:524748656081:table/studentTable"
  
  readItem:
    handler: readItem.readItem
    iamRoleStatementsName: readItem
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem 
        Resource: "arn:aws:dynamodb:${self:provider.region}:524748656081:table/studentTable"

  callerFunction:
    handler: callerFunction.makeSentence
    iamRoleStatementsName: InvokeOtherLambdaRoleCalled
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - lambda:InvokeFunction
          - lambda:InvokeAsync
        Resource: "arn:aws:lambda:${self:provider.region}:524748656081:function:dsg-project-1-dev-calledFunction"
      - Effect: "Allow"
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource: "*"

  calledFunction:
    handler: calledFunction.concatinateSentence

  logItem:
    handler: logItem.logItem
    iamRoleStatementsName: logDBStreamEntry
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:ListStreams
          - dynamodb:ListShards
        Resource: "arn:aws:dynamodb:${self:provider.region}:524748656081:table/studentTable/stream/*"
      - Effect: "Allow"
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents      
        Resource: "*"    
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - studentTable
              - StreamArn

resources:
  Resources:
    studentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: studentTable
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification: 
          StreamViewType: NEW_IMAGE 